from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, BotCommand
from aiogram.fsm.context import FSMContext
from states import Registration, CategorySelection
from aiogram.exceptions import TelegramBadRequest

router = Router()

CHANNELS = [
    ("@infa_sotka_channel", "–ò–Ω—Ñ–∞ –°–æ—Ç–∫–∞"),
]

async def is_user_subscribed(bot, user_id: int) -> bool:
    for channel, _ in CHANNELS:
        try:
            member = await bot.get_chat_member(chat_id=channel, user_id=user_id)
            if member.status in ("left", "kicked"):
                return False
        except TelegramBadRequest:
            return False
    return True

@router.message(F.text == "/start")
async def cmd_start(message: Message, state: FSMContext):
    await message.bot.set_my_commands([
        BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="new_game", description="–ù–æ–≤–∞—è –∏–≥—Ä–∞"),
        BotCommand(command="score", description="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—á—ë—Ç"),
        BotCommand(command="end_game", description="–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É")
    ])

    if not await is_user_subscribed(message.bot, message.from_user.id):
        buttons = [
            [InlineKeyboardButton(text=name, url=f"https://t.me/{channel[1:]}")]
            for channel, name in CHANNELS
        ]
        buttons.append([InlineKeyboardButton(text="üîÑ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subs")])
        await message.answer(
            "‚ùó –ß—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å, –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–∞ –∫–∞–Ω–∞–ª–∞:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
        )
        return

    await state.clear()
    await message.answer(
        "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É <b>–ö—Ä–æ–∫–æ–¥–∏–ª</b>!\n\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ üëá",
        parse_mode="HTML"
    )
    await state.set_state(Registration.getting_name)

@router.callback_query(F.data == "check_subs")
async def recheck_subs(callback: CallbackQuery, state: FSMContext):
    if not await is_user_subscribed(callback.bot, callback.from_user.id):
        await callback.answer("‚ùå –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å", show_alert=True)
        return

    await callback.message.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ üëá")
    await state.set_state(Registration.getting_name)

@router.message(F.text == "/new_game")
async def cmd_new_game(message: Message, state: FSMContext):
    if not await is_user_subscribed(message.bot, message.from_user.id):
        buttons = [
            [InlineKeyboardButton(text=name, url=f"https://t.me/{channel[1:]}")]
            for channel, name in CHANNELS
        ]
        buttons.append([InlineKeyboardButton(text="üîÑ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subs")])
        await message.answer(
            "‚ùó –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
        )
        return

    await state.clear()
    await message.answer(
        "üîÑ <b>–ù–æ–≤–∞—è –∏–≥—Ä–∞!</b>\n\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–≥—Ä–æ–∫–∞ üëá",
        parse_mode="HTML"
    )
    await state.set_state(Registration.getting_name)

@router.message(Registration.getting_name)
async def get_player_name(message: Message, state: FSMContext):
    name = message.text.strip()
    if not name:
        await message.answer("‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    data = await state.get_data()
    players = data.get("players", [])
    players.append({"name": name, "score": 0})
    await state.update_data(players=players)

    await message.answer(
        f"‚úÖ –ò–≥—Ä–æ–∫ <b>{name}</b> –¥–æ–±–∞–≤–ª–µ–Ω!",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞", callback_data="add_more")],
            [InlineKeyboardButton(text="‚úÖ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="choose_category")]
        ])
    )

@router.callback_query(F.data == "add_more")
async def add_more_player(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ üëá")
    await state.set_state(Registration.getting_name)

@router.callback_query(F.data == "choose_category")
async def choose_category(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    players = data.get("players", [])
    if not players:
        await callback.message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞.")
        return

    await state.set_state(CategorySelection.choosing_category)

    await callback.message.answer(
        "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–ª–æ–≤:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞–±–æ—Ä", callback_data="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞–±–æ—Ä")],
            [InlineKeyboardButton(text="–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –Ω–∞–±–æ—Ä", callback_data="–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –Ω–∞–±–æ—Ä")],
            [InlineKeyboardButton(text="–ö—Ä—ã–ª–∞—Ç—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è", callback_data="–ö—Ä—ã–ª–∞—Ç—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è")]
        ])
    )
